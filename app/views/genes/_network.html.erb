<style type="text/css">
        /* style for the visualization container */
    #infovis {
        width: 900px;
        height: 500px;
        background-color: white;
    }

        /* style for node labels */
    .node {
        color: black;
        background-color: transparent;
        cursor: pointer;
        font-weight: bold;
        opacity :0.9;
    }

    .node:hover {
        cursor: pointer;
        color: black;
        background-color: white;
        font-weight: bold;
        opacity: 1;
    }
</style>

<script>
    var net=<%=@network.to_json.html_safe%>
    var i;
    var json;

$(document).ready( function () {
          i=0;
         $('#gene_network_tbl').dataTable( {
             "sDom": "T<'clear'><'H'lfr>t<'F'ip>",
             "bJQueryUI": true,
             "sPaginationType": "full_numbers",
             "bPaginate": true,
             "oTableTools": {
                 "sSwfPath": 'assets/DataTables-1.9.4/extras/TableTools/media/swf/copy_csv_xls_pdf.swf',
                 "aButtons": [
                     {
                         "sExtends": "xls",
                         "sButtonText": "Save as Excel"
                     },
                     {
                         "sExtends": "pdf",
                         "sButtonText": "Save as PDF"
                     }
                 ]

             }
         } );
    /* var count= <%=@network.size%> ;

   if( count<300 )
    {
    $.each(net,function(index, value){
        $("#cloud_content").append("<li><a href='#' rel='20'>"+value.symbol2+"</a></li>");
        i++;
    });
   if(i<100) {
    $('#cloud').tagcloud({centrex:250,centrey:250,min_font_size: 8,
        max_font_size: 10, random_points: 50, zoom: 75});

   }

    if(i>100 && i<300)  {
        $('#cloud').tagcloud({centrex:400,centrey:400,min_font_size: 8,
            max_font_size: 10, random_points: 50, zoom: 75});
    }
    }
    else{
        $("#cloud").append( "<a href='#' onclick='createPopup()'>Network</a>");
    }

} );

  function createPopup(){
      var popup = open("", "Popup", "width=1500,height=1500");
      var script_1= popup.document.createElement('script');
      script_1.setAttribute("src", "/assets/jquery.js?body=1");
      script_1.setAttribute("type", "text/javascript");
      popup.document.head.appendChild(script_1);
      var script_2= popup.document.createElement('script');
      script_2.setAttribute("src", "/assets/jquery.mousewheel.min.js?body=1");
      script_2.setAttribute("type", "text/javascript");
      popup.document.head.appendChild(script_2);
      var script_3= popup.document.createElement('script');
      script_3.setAttribute("src", "/assets/jquery.tagsphere.js?body=1");
      script_3.setAttribute("type", "text/javascript");
      popup.document.head.appendChild(script_3);
      var script=popup.document.createElement('script');
      popup.document.head.appendChild(script);

      var div=popup.document.createElement('div');
      div.setAttribute("id", "cloud");
      var ul=popup.document.createElement('ul');
      div.appendChild(ul);

     $.each(net,function(index, value){
         var li = popup.document.createElement("li");
         li.innerHTML=("<a href='#' rel='20'>"+value.symbol2+"</a>");
         ul.appendChild(li);

      });
     // document.getElementsByTagName('div').append("</ul>");
      popup.document.body.appendChild(div);

      var cloud=document.getElementsByTagName('div');
      script.innerHTML=" $('#cloud').tagcloud({centrex:650,centrey:650,min_font_size: 8,max_font_size: 10, random_points: 50, zoom: 75, min_zoom: 10, max_zoom: 100, zoom_factor: 2 });";   */
    if(net.length>0)  {
        json='{ "id":"'+ net[0].id1+'" ,"name":"'+ net[0].symbol1+'", "children":[';

        var l=50;
        if(net.length<50){
            l=net.length;
        }
        for(i=0; i<l; i++){
            json +='{"id": "'+ net[i].id2+'","name": "'+ net[i].symbol2+ '", "data":[], "children":[]}, ';
        }
        json=json.substring(0, json.length -2);
        json+='], "data":[]}';

        json= $.parseJSON(json);
        onLoad();
    }// end if
} );
    function onLoad() {

        var w=900;
        var h=500;
        var ht = new $jit.Hypertree({
            //id of the visualization container
            injectInto: 'infovis',
            //canvas width and height
            width: w,
            height: h,
            //Change node and edge styles such as
            //color, width and dimensions.
            Node: {
                dim: 9,
                color: "#f00"
            },
            Edge: {
                lineWidth: 2,
                color: "#088"
            },
            onBeforeCompute: function(node){
                Log.write("centering");
            },
            //Attach event handlers and add text to the
            //labels. This method is only triggered on label
            //creation
            onCreateLabel: function(domElement, node){
                domElement.innerHTML = node.name;
                //$jit.util.addEvent(domElement, 'click', function () {
                //ht.onClick(node.id, {
                // onComplete: function() {
                //   ht.controller.onComplete();
                //}
                //});
                //});
            },
            //Change node styles when labels are placed
            //or moved.
            onPlaceLabel: function(domElement, node){
                var style = domElement.style;
                style.display = '';
                style.cursor = 'pointer';
                if (node._depth <= 1) {
                    style.fontSize = "0.7em";
                    style.color = "black";

                } else if(node._depth == 2){
                    style.fontSize = "0.7em";
                    style.color = "#555";

                } else {
                    style.display = 'none';
                }

                var left = parseInt(style.left);
                var w = domElement.offsetWidth;
                style.left = (left - w / 2) + 'px';
            },

            onComplete: function(){
                Log.write("done");

                //Build the right column relations list.
                //This is done by collecting the information (stored in the data property)
                //for all the nodes adjacent to the centered node.
                var node = ht.graph.getClosestNodeToOrigin("current");
                var html = "<h4>" + node.name + "</h4><b>Connections:</b>";
                html += "<ul>";
                node.eachAdjacency(function(adj){
                    var child = adj.nodeTo;
                    if (child.data) {
                        var rel = (child.data.band == node.name) ? child.data.relation : node.data.relation;
                        html += "<li>" + child.name + " " + "<div class=\"relation\">(relation: " + rel + ")</div></li>";
                    }
                });
                html += "</ul>";
                $jit.id('inner-details').innerHTML = html;
            }
        });
//load JSON data.
        ht.loadJSON(json);
//compute positions and plot.
        ht.refresh();
    }






</script>
<div style="margin-top: 1%;">
  <% if @network.size()>0 %>
 <h2>List of interactions for <%=network.at(1).symbol1%></h2>
  <% end %>
<table id="gene_network_tbl" class="display">
<thead>
  <tr>
    <th>Entrez ID of gene 1</th>
    <th>Entrez ID of gene 2</th>
    <th>Symbol of gene 1</th>
    <th>Symbol of gene 2</th>
  </tr>
</thead>
<tbody>
  <%network.each do |n| %>
      <tr>
        <td><%= n.id1 %></td>
        <td><%= n.id2 %></td>
        <td><%= n.symbol1 %></td>
        <td><%= n.symbol2 %></td>
      </tr>
  <% end %>
</tbody>
</table>
</div>
<h2>The interaction network</h2>
<div id="cloud" style="width:800px; height:800px;position:relative; overflow: hidden; margin: 0px; padding: 0px;">
  <ul id="cloud_content">  </ul>
</div></div>

